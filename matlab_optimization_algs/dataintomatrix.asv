%Cristian Duguet

%Ajuste Paramétrico del la curva multidimensional de acoplamiento de un
%divisor de potencia.

%Modificaciones:
%2009-oct-12: C.D. - Creación

%-------------------------------------------------------------------------%
clc
clear all
            %-------- IMPORTACION DE DATOS --------%
%Datos de simulación importados  en S_generic.mat (para div cuadrado)
open('S_generic.mat');
%Datos de simulación importados  en S_sloping.mat (para div inclinado)
%open('S_sloping.mat');
            %--------------------------------------%
data=ans.data;

%Creación de la matrix 4-dimensional: las columnas dependientes de la 
%frecuencia en la matriz importada estan ordenados en br, dentro en b1, 
%dentro en b.
for ibr=1:5; %br=3,4,5,6,7
for ib1=1:9; %b1=1,...,9
for ib=ib1:9; %b=2,...,10
    S_generic(ib1,ib,ibr,:)=data(:,226+((ibr-1)*45)+((21*ib1-ib1^2)/2-9)+(ib-ib1));
end
end
end

%-------------------------------------------------------------------------%
%Para ver la independencia con respecto de b, y si es bueno considerar que
%b=b1+br. Para esto se utilizará el criterio de máximo  acoplamiento (S)

for ibr = 1:5
    fprintf('Valor de S máximos, para cada b_1, b_r = %d mm , f =10GHz \n',ibr+2)    
    [maxi ind] = max(S_generic(:,:,ibr,16),[],2); %los máximos para cada b1 fixed
    for ib1=1:9
        mini(ib1) = min(  S_generic(ib1,S_generic(ib1,:,ibr,16) > 0,ibr,16)); %los mínimos distintos de 0
        valor_restr(ib1) = S_generic(ib1,min(ibr+ib1+1,9),ibr,16);
    end
    
    fprintf('b1 \t & \t b \t & \t Variación máxima(%%) \t & \t Variación en b=b1+br (%%) \n');
    for ib1=1:9
        fprintf('%g \t & \t %g \t & \t %g \t & \t %g  \n',ib1, ind(ib1), (maxi(ib1)-mini(ib1))/maxi(ib1), (maxi(ib1)-valor_restr(ib1))/maxi(ib1))
    end
end

%Entonces, de lo anterior se ve que la respuesta de S tiende a un máximo
%cuando b tiende a la cercanía de b1+br, sin embargo esta respuesta sigue
%siendo muy plana. Se recomienda, para simplificar el modelo a ajustar, que
%se considere la restricción b = b1+br o cercana, y se consideren sólo las
%variables b1,br,f en el ajuste paramétrico de curvas, de acuerdo al modelo
%experimental.
%Esto ademas nos facilita el ajujste de curvas del modelo, ya que
%considerando b, existia la condición b1<b, entonces había que realizar un
%ajuste en una matriz 4-dimensional no "cuadrada". 

%-------------------------------------------------------------------------%
%Se modela la matriz de datos restringida como:

for ibr =1:5 %for br = 3mm...5mm
    for ib1 = 1:9 %for b1 =1mm,...,9mm
        S_generic_restr(ib1,ibr,:) = S_generic(ib1,min(ib1+ibr+1,9),ibr,:);
    end
end
%-------------------------------------------------------------------------%
%% Ajuste de parámetros del modelo a los datos
%Para esto se utiliza el método de ajuste por mínimos cuadrados con
%lsqcurvefitting. Las variables independientes son 3: b1, br, f
%Los parámetros son 2.

% La ecuacion empírica tiene la forma matemática de: 
% S^2 = br/(b) * alpha * (10/f^beta)
%   con b=b1+br:
% S^2 = br/(b1+br) * alpha * (10/f^beta)

%Se crean las matrices de variables independientes del modelo, usando
%ndgrid
[xdata.b1,xdata.br,xdata.f] =   ndgrid(1:1:9, 3:1:7, 8.5:.1:11.5);

%Los datos obtenidos de la simulación. Datos a los que se ajusta la curva.
ydata=S_generic_restr.^2;

%Valores iniciales de parámetros para la iteración.
x0(1) = 0.3;
x0(2) = .5;

%Definición del modelo, función de parámetros (x) y puntos de variables
%independientes (x_var). Cabe destacar que los nombres son derivados de la
%nomenclatura usada en MATLAB.
Fun = @(x,x_var)x_var.br./(x_var.br+x_var.b1) *x(1).*10./x_var.f.^x(2);


%AJUSTE CON MINIMOS CUADRADOS
[x, resnorm] = lsqcurvefit(Fun, x0, xdata, ydata)

%-------------------------------------------------------------------------%
%GRÁFICO 1 : modelo y datos, vs  b1 , f ---- br=3mm
figure(1)
[a,b]=ndgrid(1:9, 8.5:.1:11.5);
x= [1.4 1]
datos = squeeze(ydata(:,1,:));
modelo = Fun(x,xdata);
modelo=squeeze(modelo(:,1,:));
plot3(a,b,modelo,a,b,datos);xlabel('b1');ylabel('f');

%-------------------------------------------------------------------------%
%GRÁFICO 1 : modelo y datos, vs  b1 , br ------ f=10GHz
clear figure(2)
figure(2)
[a,b]=ndgrid(1:9, 3:7);
datos_br = squeeze(ydata(:,:,16));
modelo = Fun(x,xdata);
modelo=squeeze(modelo(:,:,16));
surface(a,b,modelo);hold on;surface(a,b,datos_br);xlabel('b1');ylabel('br');
